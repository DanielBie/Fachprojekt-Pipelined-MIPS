$date
  Wed Jun 23 16:48:39 2021
$end
$version
  GHDL v0
$end
$timescale
  1 fs
$end
$scope module standard $end
$upscope $end
$scope module std_logic_1164 $end
$upscope $end
$scope module numeric_std $end
$upscope $end
$scope module datapath $end
$var reg 1 ! clk $end
$var reg 1 " reset $end
$var reg 1 # memtoregd $end
$var reg 1 $ alusrcd $end
$var reg 1 % regdstd $end
$var reg 1 & regwrited $end
$var reg 1 ' jump $end
$var reg 1 ( memwrited $end
$var reg 1 ) branchd $end
$var reg 3 * alucontrold[2:0] $end
$var reg 6 + opd[5:0] $end
$var reg 6 , functd[5:0] $end
$var reg 32 - pc[31:0] $end
$var reg 32 . pcf[31:0] $end
$var reg 32 / pcplus4f[31:0] $end
$var reg 32 0 instrf[31:0] $end
$var reg 32 1 pcbranchf[31:0] $end
$var reg 1 2 not_clk $end
$var reg 5 3 rtd[4:0] $end
$var reg 5 4 rdd[4:0] $end
$var reg 32 5 rd1[31:0] $end
$var reg 32 6 rd2[31:0] $end
$var reg 32 7 signextendd[31:0] $end
$var reg 32 8 pcplus4d[31:0] $end
$var reg 32 9 instrd[31:0] $end
$var reg 32 : pcjumpd[31:0] $end
$var reg 1 ; zeroe $end
$var reg 1 < regwritee $end
$var reg 1 = memwritee $end
$var reg 1 > memtorege $end
$var reg 1 ? branche $end
$var reg 1 @ alusrce $end
$var reg 1 A regdste $end
$var reg 3 B alucontrole[2:0] $end
$var reg 5 C writerege[4:0] $end
$var reg 5 D rte[4:0] $end
$var reg 5 E rde[4:0] $end
$var reg 32 F srcae[31:0] $end
$var reg 32 G srcbe[31:0] $end
$var reg 32 H writedatae[31:0] $end
$var reg 32 I signimme[31:0] $end
$var reg 32 J pcplus4e[31:0] $end
$var reg 32 K signimmesh[31:0] $end
$var reg 32 L aluoute[31:0] $end
$var reg 32 M writebranche[31:0] $end
$var reg 32 N pcbranche[31:0] $end
$var reg 1 O pcsrcm $end
$var reg 1 P zerom $end
$var reg 1 Q regwritem $end
$var reg 1 R memtoregm $end
$var reg 1 S memwritem $end
$var reg 1 T branchm $end
$var reg 5 U writeregm[4:0] $end
$var reg 32 V aluoutm[31:0] $end
$var reg 32 W writedatam[31:0] $end
$var reg 32 X writebranchm[31:0] $end
$var reg 32 Y pcbranchm[31:0] $end
$var reg 32 Z readdatam[31:0] $end
$var reg 1 [ regwritew $end
$var reg 1 \ memtoregw $end
$var reg 5 ] writeregw[4:0] $end
$var reg 32 ^ aluoutw[31:0] $end
$var reg 32 _ readdataw[31:0] $end
$var reg 32 ` resultw[31:0] $end
$scope module pcreg $end
$var reg 1 a clk $end
$var reg 1 b reset $end
$var reg 32 c d[31:0] $end
$var reg 32 d q[31:0] $end
$upscope $end
$scope module pcadd1 $end
$var reg 32 e a[31:0] $end
$var reg 32 f b[31:0] $end
$var reg 32 g y[31:0] $end
$upscope $end
$scope module immsh $end
$var reg 32 h a[31:0] $end
$var reg 32 i y[31:0] $end
$upscope $end
$scope module pcadd2 $end
$var reg 32 j a[31:0] $end
$var reg 32 k b[31:0] $end
$var reg 32 l y[31:0] $end
$upscope $end
$scope module pcbrmux $end
$var reg 32 m d0[31:0] $end
$var reg 32 n d1[31:0] $end
$var reg 1 o s $end
$var reg 32 p y[31:0] $end
$upscope $end
$scope module pcmux $end
$var reg 32 q d0[31:0] $end
$var reg 32 r d1[31:0] $end
$var reg 1 s s $end
$var reg 32 t y[31:0] $end
$upscope $end
$scope module rf $end
$var reg 1 u clk $end
$var reg 1 v we3 $end
$var reg 5 w a1[4:0] $end
$var reg 5 x a2[4:0] $end
$var reg 5 y a3[4:0] $end
$var reg 32 z wd3[31:0] $end
$var reg 32 { rd1[31:0] $end
$var reg 32 | rd2[31:0] $end
$comment mem is not handled $end
$upscope $end
$scope module wrmux $end
$var reg 5 } d0[4:0] $end
$var reg 5 !" d1[4:0] $end
$var reg 1 "" s $end
$var reg 5 #" y[4:0] $end
$upscope $end
$scope module resmux $end
$var reg 32 $" d0[31:0] $end
$var reg 32 %" d1[31:0] $end
$var reg 1 &" s $end
$var reg 32 '" y[31:0] $end
$upscope $end
$scope module se $end
$var reg 16 (" a[15:0] $end
$var reg 32 )" aext[31:0] $end
$upscope $end
$scope module srcbmux $end
$var reg 32 *" d0[31:0] $end
$var reg 32 +" d1[31:0] $end
$var reg 1 ," s $end
$var reg 32 -" y[31:0] $end
$upscope $end
$scope module mainalu $end
$var reg 32 ." a[31:0] $end
$var reg 32 /" b[31:0] $end
$var reg 3 0" alucontrol[2:0] $end
$var reg 32 1" result[31:0] $end
$var reg 1 2" zero $end
$upscope $end
$scope module instmem $end
$var reg 32 3" pc[31:0] $end
$var reg 32 4" instr[31:0] $end
$comment mem is not handled $end
$upscope $end
$scope module datamem $end
$var reg 1 5" clk $end
$var reg 32 6" addr[31:0] $end
$var reg 32 7" data_in[31:0] $end
$var reg 1 8" memwrite $end
$var reg 32 9" data_out[31:0] $end
$comment mem is not handled $end
$upscope $end
$scope module decode $end
$var reg 1 :" clk $end
$var reg 32 ;" instr[31:0] $end
$var reg 32 <" pcplus4[31:0] $end
$var reg 32 =" instrd[31:0] $end
$var reg 32 >" pcplus4d[31:0] $end
$comment mem is not handled $end
$upscope $end
$scope module execute $end
$var reg 1 ?" clk $end
$var reg 32 @" rd1[31:0] $end
$var reg 32 A" rd2[31:0] $end
$var reg 5 B" rtd[4:0] $end
$var reg 5 C" rdd[4:0] $end
$var reg 32 D" signextendd[31:0] $end
$var reg 32 E" pcplus4d[31:0] $end
$var reg 1 F" regwrited $end
$var reg 1 G" memtoregd $end
$var reg 1 H" memwrited $end
$var reg 1 I" branchd $end
$var reg 3 J" alucontrold[2:0] $end
$var reg 1 K" alusrcd $end
$var reg 1 L" regdstd $end
$var reg 32 M" srcae[31:0] $end
$var reg 32 N" writedatae[31:0] $end
$var reg 5 O" rte[4:0] $end
$var reg 5 P" rde[4:0] $end
$var reg 32 Q" signimme[31:0] $end
$var reg 32 R" pcplus4e[31:0] $end
$var reg 1 S" regwritee $end
$var reg 1 T" memtorege $end
$var reg 1 U" memwritee $end
$var reg 1 V" branche $end
$var reg 3 W" alucontrole[2:0] $end
$var reg 1 X" alusrce $end
$var reg 1 Y" regdste $end
$comment mem_32 is not handled $end
$comment mem_5 is not handled $end
$comment mem_3 is not handled $end
$var reg 7 Z" mem_1[6:0] $end
$upscope $end
$scope module memory $end
$var reg 1 [" clk $end
$var reg 1 \" zeroe $end
$var reg 32 ]" aluoute[31:0] $end
$var reg 32 ^" writedatae[31:0] $end
$var reg 5 _" writerege[4:0] $end
$var reg 32 `" pcbranche[31:0] $end
$var reg 1 a" regwritee $end
$var reg 1 b" memtorege $end
$var reg 1 c" memwritee $end
$var reg 1 d" branche $end
$var reg 1 e" zerom $end
$var reg 32 f" aluoutm[31:0] $end
$var reg 32 g" writedatam[31:0] $end
$var reg 5 h" writeregm[4:0] $end
$var reg 32 i" pcbranchm[31:0] $end
$var reg 1 j" regwritem $end
$var reg 1 k" memtoregm $end
$var reg 1 l" memwritem $end
$var reg 1 m" branchm $end
$comment mem_32 is not handled $end
$comment mem_5 is not handled $end
$var reg 5 n" mem_1[4:0] $end
$upscope $end
$scope module writeback $end
$var reg 1 o" clk $end
$var reg 32 p" aluoutm[31:0] $end
$var reg 32 q" readdatam[31:0] $end
$var reg 1 r" regwritem $end
$var reg 1 s" memtoregm $end
$var reg 5 t" writeregm[4:0] $end
$var reg 32 u" aluoutw[31:0] $end
$var reg 32 v" readdataw[31:0] $end
$var reg 1 w" regwritew $end
$var reg 1 x" memtoregw $end
$var reg 5 y" writeregw[4:0] $end
$comment mem is not handled $end
$var reg 1 z" regwrite $end
$var reg 1 {" memtoreg $end
$var reg 5 |" writereg[4:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
U!
U"
U#
U$
U%
U&
U'
U(
U)
bUUU *
bUUUUUU +
bUUUUUU ,
bXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX -
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU .
bXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX /
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU 0
bXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 1
U2
bUUUUU 3
bUUUUU 4
b00000000000000000000000000000000 5
b00000000000000000000000000000000 6
b0000000000000000UUUUUUUUUUUUUUUU 7
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU 8
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU 9
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU00 :
0;
U<
U=
U>
U?
U@
UA
bUUU B
bUUUUU C
bUUUUU D
bUUUUU E
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU F
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU G
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU H
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU I
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU J
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU00 K
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU L
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU M
bXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX N
UO
UP
UQ
UR
US
UT
bUUUUU U
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU V
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU W
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU X
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU Y
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU Z
U[
U\
bUUUUU ]
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU ^
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU _
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU `
Ua
Ub
bXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX c
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU d
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU e
b00000000000000000000000000000100 f
bXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX g
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU h
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU00 i
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU j
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU00 k
bXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX l
bXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX m
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU n
Uo
bXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX p
bXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX q
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU00 r
Us
bXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX t
Uu
Uv
bUUUUU w
bUUUUU x
bUUUUU y
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU z
b00000000000000000000000000000000 {
b00000000000000000000000000000000 |
bUUUUU }
bUUUUU !"
U""
bUUUUU #"
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU $"
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU %"
U&"
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU '"
bUUUUUUUUUUUUUUUU ("
b0000000000000000UUUUUUUUUUUUUUUU )"
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU *"
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU +"
U,"
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU -"
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU ."
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU /"
bUUU 0"
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU 1"
02"
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU 3"
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU 4"
U5"
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU 6"
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU 7"
U8"
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU 9"
U:"
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU ;"
bXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX <"
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU ="
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU >"
U?"
b00000000000000000000000000000000 @"
b00000000000000000000000000000000 A"
bUUUUU B"
bUUUUU C"
b0000000000000000UUUUUUUUUUUUUUUU D"
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU E"
UF"
UG"
UH"
UI"
bUUU J"
UK"
UL"
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU M"
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU N"
bUUUUU O"
bUUUUU P"
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU Q"
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU R"
US"
UT"
UU"
UV"
bUUU W"
UX"
UY"
bUUUUUUU Z"
U["
0\"
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU ]"
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU ^"
bUUUUU _"
bXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX `"
Ua"
Ub"
Uc"
Ud"
Ue"
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU f"
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU g"
bUUUUU h"
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU i"
Uj"
Uk"
Ul"
Um"
bUUUUU n"
Uo"
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU p"
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU q"
Ur"
Us"
bUUUUU t"
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU u"
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU v"
Uw"
Ux"
bUUUUU y"
Uz"
U{"
bUUUUU |"
